

<script>
  import wepy from '@wepy/core'

  let service = require('../service').Service

  wepy.component({
    data: {
      title: "",
      files: [],
      isNeedEdit: false,
      deleteImages: [],
      addImages: [], 
      imageMemos: [],
      index: 0,
      localImageMap: {},

      selectImageMode: false,  //选择模式，用于批量删除
      selectedFlags: [],
      confirmDelete: false,
      isBtx: false,
    },

    props: ["title", "files", "deleteImages", "addImages", "index", "isNeedImageMemos", 
        "imageMemos", "isNeedEdit", "localImageMap", "selectImageMode", "confirmDelete", "isBtx"],

    watch: {
        files: function (newVal, oldVal) {
            //console.log('files changed')
            //console.log(newVal, oldVal)
            let that = this.$wx
            if (newVal.length > 0 && that.data.selectedFlags.length == 0) {
               for(var i = 0; i < newVal.length; i++) {
                  that.data.selectedFlags.push(false)
                  //console.log('push false to selectedFlags')
                }
            }
            //console.log('files changed end')
        },
        imageMemos: function(newVal, oldVal) {
          //console.log('imageMemos changed')
          //console.log(newVal, oldVal)
        },
        selectImageMode: function(newVal, oldVal) {
          //console.log('selectImageMode changed')
          let that = this.$wx
          for (var i = 0; i < that.data.selectedFlags.length; i++) {
            that.data.selectedFlags[i] = false
          }
          that.setData({
            selectedFlags: that.data.selectedFlags
          })
        },
        confirmDelete: function(newValue, oldVal) {
          let that = this.$wx
          //console.log(`watch: confirmDelte ${that.data.index}: newValue = ${newValue}`)
          if (newValue) {
            let that = this.$wx
            that.handleBatchDelete(this)
          }
        }
    },


    methods: {
      handleBatchDelete: function(vm) {
        //执行删除
        this.deleteImages(vm)
      },

      chooseImage: function (e) {
        var self = this
        const that = this.$wx
        //console.log(e)
        ///console.log(self)
        wx.chooseImage({
          sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有
          sourceType: ['album', 'camera'], // 可以指定来源是相册还是相机，默认二者都有
          count: that.data.isNeedEdit ? 1 : 9,
          success: function (res) {
            // 返回选定照片的本地文件路径列表，tempFilePath可以作为img标签的src属性显示图片
            var localImages = res.tempFilePaths
            //console.log(localImages)
            that.data.files = that.data.files.concat(res.tempFilePaths)
            var length = res.tempFilePaths.length
            //console.log( that.data.imageMemos )
            for(var i = 0 ; i < length; i ++) {
               if (that.data.imageMemos) {
                that.data.imageMemos.push('')
               }
               that.data.selectedFlags.push(false)
            }
           // console.log(that.data.files)
            that.setData({
              files: that.data.files
            });
            self.$emit('setfiles', {index:  that.data.index, files: that.data.files})
            //console.log('imageMemos: ' + JSON.stringify(that.data.imageMemos))
           self.$emit('setimagememos', {index: that.data.index, imageMemos: that.data.imageMemos})
            
            //需要把本地的图片上传到服务器，就是为了能够预览本地的图片
            localImages.forEach( localImage => {
              //that.data.localImageMap[localImage] = localImage
              self.upload(localImage)
            })

            //图片编辑
            if (that.data.isNeedEdit) {
              wx.navigateTo({
              // url: './editimage?path=./'+localImages[0].substring(7)
                url: './editimage?path='+localImages[0]+'&imageTypeIndex='+that.data.index
              }) 
            }
          }
        })
      },

      bindImageMemo: function(e) {

        var self = this.$wx
        var that = self
       
        var index = parseInt(e.$wx.target.id)
        var value = e.$wx.detail.value
        //console.log(self.data.imageMemos)
        //console.log("index = " + index)
        self.data.imageMemos[index] = value
      
        that.setData({
          imageMemos: self.data.imageMemos
        })
        console.log(self.data.imageMemos)
        this.$emit('setimagememos', {index: self.data.index, imageMemos: self.data.imageMemos})
        
      },

      tapImage: function(index) {
         const that = this.$wx
         //that.previewImage(index)
         if (that.data.selectImageMode) {
           that.selectImage(index)
         } else {
           that.previewImage(index)
         }
         
      },

      selectImage: function (index) {
        const that = this
        that.data.selectedFlags[index] = !that.data.selectedFlags[index]
        that.setData({
          selectedFlags: that.data.selectedFlags
        })
      },

      previewImage: function (index) {
        //const that = this.$wx
        const that = this
        if (that.data.lock) {
          return;
        }
        //console.log(this.data.files)
        console.log('fileName: ' + that.data.files[index])

        wx.previewImage({
          current: that.getMapUrl(that.data.files[index]) + "?notCompress=true", // 当前显示图片的http链接
          urls: that.data.files.map( url => that.getMapUrl(url) + "?notCompress=true") // 需要预览的图片http链接列表
        })
      },

      getFileName: function(url) {
        if (url.indexOf('/') == -1) {
          return url
        }
        return url.substr(url.lastIndexOf('/')+1)
      },


      getMapUrl: function(url) {
        console.log(url)
        //console.log(this.data.localImageMap)
        if (url.startsWith('http://tmp/') || url.startsWith('wxfile://')) {
          var fileName = this.getFileName(url)
          //console.log(fileName)
          var resultUrl = this.data.localImageMap[fileName]

          if (resultUrl == null) {
            //console.log(resultUrl)
             //console.log("getMapUrl: reulst -> " + url)
            return url
          }
          
          //console.log(resultUrl)
          return  service.getCheckImageUrl(resultUrl)
        }

        if (url.startsWith('http' || url.startsWith('https')  )) {
          return url
        }

        var fileName = this.getFileName(url)
        //console.log(fileName)
        var resultUrl = this.data.localImageMap[fileName]
        
        //console.log(resultUrl)
        if (resultUrl == null) {
          //console.log("getMapUrl: reulst -> " + url)
          return url
        }
        return  service.getCheckImageUrl(resultUrl)
      },


      touchend: function (e) {
        const that = this.$wx
        if (that.data.lock) {
          setTimeout(() => {
            that.setData({
              lock: false
            })
          }, 100)
        }
      },



      bindLongImageTap: function (index) {
        console.log('long tap handler')
        const vm = this
        let self = this.$wx;
        self.setData({
          lock: true
        });
        if (self.data.selectImageMode) {
          return
        }
        self.enterSelectMode()
        vm.$emit('enterselectmode', {})
      },

      enterSelectMode: function() {
        var that = this
        
        that.setData({
          selectImageMode: true,
          //selectedFlags: that.data.selectedFlags
        })
      },

      deleteImages: function(vm) {
        let self = this
        let that = this

        let files = [], memos = [], deleteUrls = [], selectedFlags = []
        console.log(that.data.selectedFlags)
        for (var i = 0; i < that.data.selectedFlags.length; i++) {
          let isSelect = that.data.selectedFlags[i]
          if (isSelect) {
            let url = that.data.files[i]
            if (!url.startsWith('http://tmp/') && !url.startsWith('wxfile://')) {
              deleteUrls.push(url)
            }
            console.log('delete image index: ' + i)
          } else {
            files.push(that.data.files[i])
            selectedFlags.push(false)
            if (that.data.imageMemos) {
              memos.push(that.data.imageMemos[i])
            }
          }
        } 
        that.setData({ files: files, imageMemos: memos, selectedFlags: selectedFlags });
        vm.$emit('setfiles', {index:  that.data.index, files: that.data.files})
        vm.$emit('setimagememos', {index: that.data.index, imageMemos: memos})

        vm.$emit('adddeletefile', {urls:  deleteUrls})
      },


      upload: function(localImage) {
        var self = this.$wx
        console.log("self: " );
        console.log(self)
        var filePath = localImage
       
        wx.uploadFile({
          url: service.uploadTmpFileUrl(),
          filePath: filePath,
          name: filePath,
          success: function (res) {
            console.log(res)
            
            let json = null
            try {
              json = JSON.parse(res.data)
            } catch (ex) {
              console.log('exception: ' + ex)
              return
            }
            console.log(json)
            if (json.status !== 0) {
              return
            } 
            console.log("self.data.localImageMap = " + self.data.localImageMap)
            console.log("json.fileNames[0] = " + json.fileNames[0])
            self.data.localImageMap[json.orginNames[0]] = json.fileNames[0]
            console.log( self.data.localImageMap[json.orginNames[0]] )
            console.log(self.data.localImageMap)
          },
          fail: function (err) {
            console.log(err)
          }
        })
      },

    }
  })
</script>




<template>
  <div>
    <view class="weui-cells__title {{ isBtx ? 'btx' : ''}}">{{title}}: </view>
    <view class="weui-cells weui-cells_after-title">
        <view class="weui-cell">
            <view class="weui-uploader__bd">
                  <view class="weui-uploader__files"  >
                        <block v-for="(item, i) in files"  v-bind:key="'file_'+i">
                          <view class="weui-uploader__file" style="position: relative; " >

                              <image  class="weui-uploader__img" src="{{item}}" mode="aspectFill"
                                      bindtouchend="touchend" 
                                     @longtap="bindLongImageTap(i)" @tap="tapImage(i)"  />
                              <textarea wx:if="{{isNeedImageMemos[index]}}" id="{{i}}" 
                                      class="weui-uploader__img_memo" 
                                      placeholder="输入图片备注" bindinput="bindImageMemo"
                              style="font-size: 13px; height: 2.6em; " value="{{imageMemos[i]}}"
                              placeholder-style="color:#e2e2e2;" maxlength="-1" />

                              <image wx:if="{{selectImageMode}}" class="img_sel_icon" 
                                  src="{{ selectedFlags[i] ? '../icons/checkbox_2.png' : ''}}" />

                          </view>
                        </block>
                    <view wx:if="{{!selectImageMode}}" class="weui-uploader__input-box">
                      <view class="weui-uploader__input" bindtap="chooseImage"></view>
                    </view>
                  </view>
              </view>
        </view>
    </view>
      
    </div>
</template>


<style lang="less">
  @import "../style/component.wxss";

  .img_sel_icon {
    width: 25px;
    height: 25px;
    position: absolute;
    top: 0px;
    right: 0px;
  }
  .btx {
    color: #990000;
  }
</style>